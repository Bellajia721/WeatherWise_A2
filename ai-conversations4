Me: When testing parse_weather_question(), why can’t it recognize some city names even though I have already imported spaCy?

AI: Short version: importing spaCy isn’t enough. City detection depends on the model, the pipeline, the language, and your rules/fallbacks. If parse_weather_question() only does import spacy (or uses a blank/stripped pipeline), the NER won’t recognize many cities.

Here’s a tight checklist + fixes you can apply right now.

Why spaCy misses cities
	1.	Model not loaded

	•	Symptom: you did import spacy or spacy.blank('en'), but not spacy.load('en_core_web_sm') (or larger).
	•	Fix:

# one-time install in a shell:  python -m spacy download en_core_web_sm
import spacy
nlp = spacy.load("en_core_web_sm")  # NOT spacy.blank('en')



	2.	NER is disabled / excluded

	•	Symptom: nlp.pipe_names doesn’t include "ner", or you loaded with exclude=['ner'].
	•	Fix:

print(nlp.pipe_names)  # should include 'ner'
# if not, reload without exclusion:
nlp = spacy.load("en_core_web_sm")



	3.	Wrong language model for the text

	•	English model won’t reliably tag Chinese (or vice-versa).
	•	Fix: use a matching model (zh_core_web_sm) or a multilingual one (xx_ent_wiki_sm) for mixed text.

	4.	Small models aren’t exhaustive

	•	spaCy’s NER is statistical, not a full gazetteer. It won’t know every city (“Perth” ≈ OK; “Albany Creek” ≈ maybe not).
	•	Fix: add a gazetteer (dictionary) with an EntityRuler or PhraseMatcher (see code below).

	5.	Case/noise issues

	•	All-lowercase (“perth”), emojis, or punctuation can drop recall.
	•	Fix: normalize text (strip punctuation, simple title-casing heuristics) before NER.

	6.	Label filtering too strict

	•	Cities can come as GPE, LOC, sometimes FAC.
	•	Fix: accept a set of labels: {"GPE","LOC","FAC"}.

	7.	Pipeline order

	•	If you add an EntityRuler, place it before "ner" so rules can boost recognition.

ruler = nlp.add_pipe("entity_ruler", before="ner")



	8.	You’re using Tabs/Colab session issues

	•	Kernel restarts or environment upgrades can leave you with a half-installed model. Re-install and restart.

Quick diagnostics (paste and run)

import spacy
try:
    nlp = spacy.load("en_core_web_sm")
except OSError:
    raise SystemExit("Run: python -m spacy download en_core_web_sm")

print("Pipeline:", nlp.pipe_names)  # should include 'ner'

text = "weather in Perth and New York next Friday"
doc = nlp(text)
print([(e.text, e.label_) for e in doc.ents])

If you don’t see expected cities, it’s likely #4 (no gazetteer). Use a light dictionary boost:

Robust fix: add a gazetteer with EntityRuler

import spacy
from spacy.pipeline import EntityRuler

nlp = spacy.load("en_core_web_sm")
ruler = nlp.add_pipe("entity_ruler", before="ner")

# Minimal demo list; in practice load hundreds/thousands from a file
city_names = [
    "Perth", "Sydney", "Melbourne", "Brisbane", "Adelaide",
    "New York", "Los Angeles", "San Francisco", "London", "Tokyo", "Osaka"
]
patterns = [{"label":"GPE","pattern":name} for name in city_names]
ruler.add_patterns(patterns)

def extract_places(text):
    doc = nlp(text)
    out = []
    for ent in doc.ents:
        if ent.label_ in {"GPE","LOC","FAC"}:
            out.append(ent.text)
    return list(dict.fromkeys(out))  # dedupe, keep order

print(extract_places("Is it rainy in perth or new york tomorrow?"))
# With the ruler, you'll still catch "perth"/"new york" reliably even if the model misses them.

Gold-standard approach for parse_weather_question()
	•	Step 1 (NER): spaCy model (right language) + EntityRuler gazetteer.
	•	Step 2 (normalize): map names to ISO/canonical forms (pycountry, geonamescache).
	•	Step 3 (fallback): if NER finds nothing, try a case-insensitive PhraseMatcher over your gazetteer; final fallback to a geocoder (e.g., geopy/Nominatim).
	•	Step 4 (labels): accept GPE|LOC|FAC, not just GPE.

If you paste your current parse_weather_question() (imports + how you build nlp), I can point out the exact line that’s causing the misses and drop in a patched version.

